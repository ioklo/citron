# BoolExp
  - Text: "true"
    Result: !BoolExp
        Value: true

  - Text: "false"
    Result: !BoolExp
        Value: false

# operators
  - TestName: Plus Minus - Left Associativity
    Text: x + y - z + w
    Result: !BinaryExp
        Operation: Add
        Operand1: !BinaryExp
            Operation: Sub
            Operand1: !BinaryExp
                Operation: Add
                Operand1: !IDExp { Name: { Name: x, Args: [] } }
                Operand2: !IDExp { Name: { Name: y, Args: [] } }        
            Operand2: !IDExp { Name: { Name: z, Args: [] } }
        Operand2: !IDExp { Name: { Name: w, Args: [] } }

  - TestName: Assignment - Right Associativity
    Text: x = y = z
    Result: !BinaryExp        
        Operation: Assign        
        Operand1: !IDExp { Name: { Name: x, Args: [] } }
        Operand2: !BinaryExp
            Operation: Assign
            Operand1: !IDExp { Name: { Name: y, Args: [] } }
            Operand2: !IDExp { Name: { Name: z, Args: [] } }

  - TestName: Complex Precedence
    Text: |
        x1 = x2 * x3 / x4 % x5 + x6 - x7 << x8 >> x9 < x10 > x11 <= x12 >= x13 == x14 != x15 & x16 ^ x17 | x18 && x19 || x20
    Result: !BinaryExp
        Operation: Assign
        Operand1: !IDExp { Name: { Name: x1, Args: [] } }
        Operand2: !BinaryExp
            Operation: ConditionalOr
            Operand1: !BinaryExp
                Operation: ConditionalAnd
                Operand1: !BinaryExp
                    Operation: LogicalOr
                    Operand1: !BinaryExp
                        Operation: LogicalXor
                        Operand1: !BinaryExp
                            Operation: LogicalAnd
                            Operand1: !BinaryExp
                                Operation: NotEqual
                                Operand1: !BinaryExp
                                    Operand1: !BinaryExp
                                        Operation: GreaterEqual
                                        Operand1: !BinaryExp
                                            Operation: LessEqual
                                            Operand1: !BinaryExp
                                                Operation: Greater
                                                Operand1: !BinaryExp
                                                    Operation: Less
                                                    Operand1: !BinaryExp
                                                        Operation: ShiftRight
                                                        Operand1: !BinaryExp
                                                            Operation: ShiftLeft
                                                            Operand1: !BinaryExp
                                                                Operation: Sub
                                                                Operand1: !BinaryExp
                                                                    Operation: Add
                                                                    Operand1: !BinaryExp
                                                                        Operation: Mod
                                                                        Operand1: !BinaryExp
                                                                            Operation: Div
                                                                            Operand1: !BinaryExp
                                                                                Operation: Mul
                                                                                Operand1: !IDExp { Name: { Name: x2, Args: [] } }
                                                                                Operand2: !IDExp { Name: { Name: x3, Args: [] } }
                                                                            Operand2: !IDExp { Name: { Name: x4, Args: [] } }
                                                                        Operand2: !IDExp { Name: { Name: x5, Args: [] } }
                                                                    Operand2: !IDExp { Name: { Name: x6, Args: [] } }
                                                                Operand2: !IDExp { Name: { Name: x7, Args: [] } }
                                                            Operand2: !IDExp { Name: { Name: x8, Args: [] } }
                                                        Operand2: !IDExp { Name: { Name: x9, Args: [] } }
                                                    Operand2: !IDExp { Name: { Name: x10, Args: [] } }
                                                Operand2: !IDExp { Name: { Name: x11, Args: [] } }
                                            Operand2: !IDExp { Name: { Name: x12, Args: [] } }
                                        Operand2: !IDExp { Name: { Name: x13, Args: [] } }
                                    Operand2: !IDExp { Name: { Name: x14, Args: [] } }
                                Operand2: !IDExp { Name: { Name: x15, Args: [] } }
                            Operand2: !IDExp { Name: { Name: x16, Args: [] } }
                        Operand2: !IDExp { Name: { Name: x17, Args: [] } }
                    Operand2: !IDExp { Name: { Name: x18, Args: [] } }
                Operand2: !IDExp { Name: { Name: x19, Args: [] } }
            Operand2: !IDExp { Name: { Name: x20, Args: [] } }

  - TestName: Operators
    Text: x * y + z * w
    Result: !BinaryExp
        Operation: Add
        Operand1: !BinaryExp
            Operation: Mul
            Operand1: !IDExp { Name: { Name: x, Args: [] } }
            Operand2: !IDExp { Name: { Name: y, Args: [] } }
        Operand2: !BinaryExp
            Operation: Mul
            Operand1: !IDExp { Name: { Name: z, Args: [] } }
            Operand2: !IDExp { Name: { Name: w, Args: [] } }

# CharExp 

  - Text: |
        '3'
    Result: !CharExp
        Value: 51

  - Text: |
         '가'

    Result: !CharExp
        Value: 0xAC00

# IntegerExp

  - Text: "3"
    Result: !IntegerExp
        Value: 3

  - Text: "-3"
    Result: !IntegerExp
        Value: -3

  - Text: "0x3"
    Result: !IntegerExp
        Value: 3

  - Text: "0b00000000_00000000_00000000_00000001"
    Result: !IntegerExp
        Value: 1

# String Expression

  - Text: |
        String Test

    Result: !StringExp
        Value: "String Test"

  - Text: 
        String Test\n

    Result: !StringExp
        Value: "String Test\n"

# IDExp

  - Text: "x"
    Result: !IDExp
        Name: !IDWithTypeArgs            
            Name: "x"
            Args: []


# MemberExp

  - Text: "SomeNamespace.SomeClass<T>.SomeStaticMember.a"
    Result: !MemberExp        
        Exp: !MemberExp            
            Exp: !MemberExp
                Exp: !IDExp
                    Name: !IDWithTypeArgs
                        Name: "Some1Namespace"
                        Args: []

                MemberName: !IDWithTypeArgs                    
                    Name: "SomeClass"
                    Args:
                      - !IDWithTypeArgs
                        Name: "T"
                        Args: []

            MemberName: !IDWithTypeArgs
                Name: "SomeStaticMember"
                Args: []

        MemberName: !IDWithTypeArgs            
            Name: "a"
            Args: []

# CallExp

  - Text: "TSomeFunc<T>(2, false, 4)"

# T를 함수 인자로 생각할 경우, TSomeFunc, T [2, false, 4]로 쪼개지는 것이 맞다
# T를 TSomeFunc에서 지칭을 좀더 구체화 시키는 역할이라면, TSomeFunc<T>, [2, false, 4]로 쪼개져야 한다
# 임의의 delegate f 에 대해서 
#   var f = TSomeFunc<T>; 
#   f(2, false, 4); 
# 만 가능할 것이므로 TSomeFunc<T>, [2, false, 4]로 쪼개야 할 것이다.

    Result: !CallExp
        FuncExp: !IDExp
            Name: !IDWithTypeArgs 
                Name: "TSomeFunc" 
                Args: 
                  - !IDWithTypeArgs
                    Name: "T"
                    Args: []

        Args:
          - !IntegerExp
            Value: 2

          - !BoolExp
            Value: false

          - !IntegerExp
            Value: 4

# CallExp with MemberCall
  - Text: "SomeNamespace.SomeClass<T>.SomeStaticMember.a<int>(3, 4)"

    Result: !MemberExp
        Exp: !MemberExp            
            Exp: !MemberExp
                Exp: !IDExp                    
                    Name: !IDWithTypeArgs
                        Name: "SomeNamespace"
                        Args: []

                MemberName: !IDWithTypeArgs                    
                    Name: "SomeClass"
                    Args:
                      - !IDWithTypeArgs
                        Name: "T"
                        Args: []
            MemberName: !IDWithTypeArgs
                Name: "SomeStaticMember"
                Args: []
        MemberName: !IDWithTypeArgs            
            Name: "a"
            Args: []

# NewExp

  - Text: "new MyList<T>(3)"
    Result: !NewExp
        TypeName: !IDWithTypeArgs # Type -> TypeName으로 바꿔야 함
            Name: "MyList"
            Args:
              - !IDWithTypeArgs
                Name: "T"
                Args: []
        Args:
          - !IntegerExp
            Value: 3



# UnaryExp

# UnaryExp.Minus
  - Text: "- (3)"

    Result: !UnaryExp
        Operation: !UnaryExpKind 
            Minus
        Operand: !IntegerExp
            Value: 3

# UnaryExp.Negation
  - Text: "~ 0b00000000_00000000_00000000_00000001"
    Result: !UnaryExp        
        Operation: !UnaryExpKind
            Neg
        Operand: !IntegerExp
            Value: 1

# UnaryExp.Not
  - Text: "! false"
    Result: !UnaryExp        
        Operation: !UnaryExpKind            
            Not
        Operand: !BoolExp
            Value: false

# UnaryExp.PrefixInc
  - Text: "++i"
    Result: !UnaryExp        
        Operation: !UnaryExpKind            
            PrefixInc
        Operand: !IDExp
            Name: !IDWithTypeArgs
                Name: "i"
                Args: []

  - Text: "--i"
    Result: !UnaryExp        
        Operation: !UnaryExpKind
            PrefixDec
        Operand: !IDExp            
            Name: !IDWithTypeArgs                
                Name: "i"
                Args: []

  - Text: "i++"
    Result: !UnaryExp        
        Operation: !UnaryExpKind            
            PostfixInc
        Operand: !IDExp            
            Name: !IDWithTypeArgs                
                Name: "i"
                Args: []

  - Text: "i--"
    Result: !UnaryExp        
        Operation: !UnaryExpKind            
            PostfixDec
        Operand: !IDExp            
            Name: !IDWithTypeArgs                
                Name: "i"
                Args: []
...