Tests:

# BoolExp
  - Text: "true"
    Result: 
        Type: "BoolExp"
        Value: true

  - Text: "false"
    Result:
        Type: "BoolExp"
        Value: false

# CharExp 

  - Text: |
        '3'
    Result:
        Type: "CharExp"
        Value: 51

  - Text: |
         '가'

    Result:
        Type: "CharExp"
        Value: 0xAC00

# IntegerExp

  - Text: "3"
    Result:
        Type: "IntegerExp"
        Value: 3

  - Text: "-3"
    Result:
        Type: "IntegerExp"
        Value: -3

  - Text: "0x3"
    Result:
        Type: "IntegerExp"
        Value: 3

  - Text: "0b00000000_00000000_00000000_00000001"
    Result:
        Type: "IntegerExp"
        Value: 1

# String Expression

  - Text: |
        String Test

    Result:
        Type: "StringExp"
        Value: "String Test"

  - Text: 
        String Test\n

    Result:
        Type: "StringExp"
        Value: "String Test\n"

# IDExp

  - Text: "x"
    Result: 
        Type: "IDExp"
        Name: 
            Type: "IDWithTypeArgs"
            Name: "x"
            Args: []


# MemberExp

  - Text: "SomeNamespace.SomeClass<T>.SomeStaticMember.a"
    Result:
        Type: "MemberExp"
        Exp:
            Type: "MemberExp"
            Exp:
                Type: "MemberExp"

                Exp:
                    Type: "IDExp"
                    Name: "SomeNamespace"

                MemberName:
                    Type: "IDWithTypeArgs"
                    Name: "SomeClass"
                    TypeArgs:
                      - Type: "IDWithTypeArgs"
                        Name: "T"
                        TypeArgs: []
            MemberName:
                Type: "IDWithTypeArgs"
                Name: "SomeStaticMember"
                TypeArgs: []
        MemberName:
            Type: "IDWithTypeArgs"
            Name: "a"
            TypeArgs: []

# CallExp

  - Text: "TSomeFunc<T>(2, false, 4)"

# T를 함수 인자로 생각할 경우, TSomeFunc, T [2, false, 4]로 쪼개지는 것이 맞다
# T를 TSomeFunc에서 지칭을 좀더 구체화 시키는 역할이라면, TSomeFunc<T>, [2, false, 4]로 쪼개져야 한다
# 임의의 delegate f 에 대해서 
#   var f = TSomeFunc<T>; 
#   f(2, false, 4); 
# 만 가능할 것이므로 TSomeFunc<T>, [2, false, 4]로 쪼개야 할 것이다.

    Result:
        Type: "CallExp"
        FuncExp:
            Type: "IDExp"
            Name: "TSomeFunc" 
            TypeArgs:
              - Type: "IDWithTypeArgs"
                Name: "T"
                Args: []

        Args:
          - Type: "IntegerExp"
            Value: 2

          - Type: "BoolExp"
            Value: false

          - Type: "IntegerExp"
            Value: 4

# CallExp with MemberCall
  - Text: "SomeNamespace.SomeClass<T>.SomeStaticMember.a<int>(3, 4)"

    Result:
        Type: "MemberExp"
        Exp:
            Type: "MemberExp"
            Exp:
                Type: "MemberExp"

                Exp:
                    Type: "IDExp"
                    Name: "SomeNamespace"

                MemberName:
                    Type: "IDWithTypeArgs"
                    Name: "SomeClass"
                    TypeArgs:
                      - Type: "IDWithTypeArgs"
                        Name: "T"
                        TypeArgs: []
            MemberName:
                Type: "IDWithTypeArgs"
                Name: "SomeStaticMember"
                TypeArgs: []
        MemberName:
            Type: "IDWithTypeArgs"
            Name: "a"
            TypeArgs: []

# NewExp

  - Text: "new MyList<T>(3)"
    Result:
        Type: "NewExp"

        TypeName: # Type -> TypeName으로 바꿔야 함
            Type: "IDWithTypeArgs"
            Name: "MyList"
            TypeArgs:
              - Type: "IDWithTypeArgs"
                Name: "T"
                TypeArgs: []
        Args:
          - Type: "IntegerExp"
            Value: 3



# UnaryExp

# UnaryExp.Minus
  - Text: "- (3)"

    Result: 
        Type: "UnaryExp"
        Operation: 
            Type: "UnaryExpKind"
            Value: "Minus"
        Operand:
            Type: "IntegerExp"
            Value: 3

# UnaryExp.Negation
  - Text: "~ 0b00000000_00000000_00000000_00000001"
    Result:
        Type: "UnaryExp"
        Operation: 
            Type: "UnaryExpKind"
            Value: "Neg"
        Operand:
            Type: "IntegerExp"
            Value: 1


# UnaryExp.Not
  - Text: "! false"
    Result:
        Type: "UnaryExp"
        Operation: 
            Type: "UnaryExpKind"
            ValueL: "Not"
        Operand:
            Type: "BoolExp"
            Name: false

# UnaryExp.PrefixInc
  - Text: "++i"
    Result:
        Type: "UnaryExp"
        Operation: 
            Type: "UnaryExpKind"
            Value: "PrefixInc"
        Operand:
            Type: "IDExp"
            Name: 
                Type: "IDWithTypeArgs"
                Name: "i"
                Args: []

  - Text: "--i"
    Result:
        Type: "UnaryExp"
        Operation: 
            Type: "UnaryExpKind"
            Value: "PrefixDec"
        Operand:
            Type: "IDExp"
            Name: 
                Type: "IDWithTypeArgs"
                Name: "i"
                Args: []

  - Text: "i++"
    Result:
        Type: "UnaryExp"
        Operation: 
            Type: "UnaryExpKind"
            Value: "PostfixInc"
        Operand:
            Type: "IDExp"
            Name: 
                Type: "IDWithTypeArgs"
                Name: "i"
                Args: []

  - Text: "i--"
    Result:
        Type: "UnaryExp"
        Operation: 
            Type: "UnaryExpKind"
            Value: "PostfixDec"
        Operand:
            Type: "IDExp"
            Name: 
                Type: "IDWIthTypeArgs"
                Name: "i"
                Args: []
